<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>searchpcc - 一个正在老去的90后程序员</title>
    <description>一个90后的个人网站。 IT，php，Java，Python 等等。邮箱：i@searchp.cc</description>
    <link>http://searchp.cc/</link>
    <atom:link href="http://searchp.cc/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 12 Aug 2015 00:40:42 +0800</pubDate>
    <lastBuildDate>Wed, 12 Aug 2015 00:40:42 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>狂刷Git技能</title>
        <description>&lt;p&gt;关于Git的技能，网上的教程多不胜数。关于Git和SVN的异同，网上也是遍地都是。厌倦了SVN的分支的操作之后，我们团队决定做一次变革，以后的所有的项目都使用Git来做为版本控制工具。所以，在这里记录一下常用的Git操作。&lt;/p&gt;

&lt;h2 id=&quot;id-section&quot;&gt;万能命令&lt;/h2&gt;

&lt;p&gt;不解释，在程序员眼里一个命令的help就是万能的。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git help
git help -a
git help -g
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;id-section-1&quot;&gt;基础操作&lt;/h2&gt;

&lt;p&gt;初始化git仓库 ，命令：&lt;code&gt;git init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;添加文件到暂存区，命令：&lt;code&gt;git add README.md&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;提交文件到分支，命令：&lt;code&gt;git commit -m &quot;提交README.md文件&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题1：修改了文件还没有使用&lt;code&gt;git add&lt;/code&gt;提交，怎么还原？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先使用&lt;code&gt;git status&lt;/code&gt;查看状态，然后更具状态去选择性操作。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# 查看状态
git status
# 命令结果显示
On branch master
Changes not staged for commit:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)

	modified:   README.md

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看上面的说明，这个时候你可以选择添加到缓存区，或者选择还原文件。还原的命令为&lt;code&gt;git checkout -- 文件名&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;下面我们还原文件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git checkout -- README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个时候，文件README.md就恢复到了修改前的状态。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题2：修改了文件已经使用&lt;code&gt;git add&lt;/code&gt;添加，但是还没有使用&lt;code&gt;git commit&lt;/code&gt;提交怎么还原？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;还是和刚才一样，我们首先看一下&lt;code&gt;git add&lt;/code&gt;了之后的&lt;code&gt;git status&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# 查看状态
git status
# 命令结果显示
On branch master
Changes to be committed:
  (use &quot;git reset HEAD &amp;lt;file&amp;gt;...&quot; to unstage)

	modified:   README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看上面的说明，这个时候你可以选择&lt;code&gt;git reset HEAD 文件名&lt;/code&gt;的方式进行文件的还原。或者提交到版本库里面。&lt;/p&gt;

&lt;p&gt;下面我们还原文件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git reset HEAD README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个时候，文件README.md也同样恢复到了修改前的状态。&lt;/p&gt;

&lt;p&gt;看到这里，动动脚趾头我们就会知道问题3是什么了。问题3如下。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题3：修改了文件已经使用&lt;code&gt;git add&lt;/code&gt;添加到暂存区，并且还是用了&lt;code&gt;git commit&lt;/code&gt;提交到了版本库之中，我们该怎么还原？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;还是同样的办法。看看已经修改过的文件经过了&lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt;之后的&lt;code&gt;git status&lt;/code&gt;是什么。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# 查看状态
git status
# 命令结果显示
On branch master
nothing to commit, working directory clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看到上面的提示是不是大吃一惊，竟然说工作区很干净，没有任何内容需要提交。并且没有任何回退的操作的提示。这个时候不要急，我们要知道任何东西都会留下点痕迹的。我们的解决思路是这样的：找到提交的日志，通过提交的日志进行恢复。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 查看日志
git log
# 命令结果显示。 注意：具体内容依据你的客户端和提交的注释。
commit a2bba85f5bcdfca4186a03c27e68cb06e244951f
Author: searchpcc &amp;lt;searchpcc@163.com&amp;gt;
Date:   Tue Aug 11 22:58:41 2015 +0800

    第二次提交README.md

commit 6c87b3f956066d418b969f7e4429d93aedec73c2
Author: searchpcc &amp;lt;searchpcc@163.com&amp;gt;
Date:   Tue Aug 11 22:58:18 2015 +0800

    第一次提交README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们需要回退到第一次提交README.md后的状态。我们可以使用 &lt;code&gt;git reset --hard commitId(前几位就行)&lt;/code&gt;。当然，事实上有了这条命令你可以恢复到之前的任何一个commit。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# 命令
git reset --hard 6c87b3f95
# 显示
HEAD is now at 6c87b3f 第一次提交README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有的人，特别是初学版本控制的人以为到这里问题系列就结束了。未add的回退，add了为commit的回退，add了且commit了的回退。事实上还有一种情况就是你回到了过去，如果再回来呢？比如我从版本三回到了版本一，然后发现版本一不是我想回到的地方，我该怎么重新回到版本三呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题4：修改了文件已经使用git add 提交，并且还是用了&lt;code&gt;git commit&lt;/code&gt;提交到了版本库之中，我们该怎么还原？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;解决的思路和问题3类似，查看日志，然后会退到相应的版本。但是，注意这次查看日志的方式不太一样，使用的是&lt;code&gt;git reflog&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# 查看日志
git reflog
# 命令结果显示。 注意：具体内容依据你的客户端和提交的注释。
6c87b3f HEAD@{0}: reset: moving to 6c87b3f956066d418b969f7e4429d93aedec73c2
a2bba85 HEAD@{1}: commit: 第二次提交README.md
6c87b3f HEAD@{2}: commit (initial): 第一次提交README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看到版本ID，然后进行回退。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# 命令
get reset --hard a2bba85
# 显示
HEAD is now at a2bba85 第二次提交README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到这里，上面所有的功能其实SVN都是有的，并且实现的难度都差不多。可能有些人有些许着急了，这不是Git的一篇狂刷技能么？怎么还不涉及点干货呢？下面就来干货。还是沿袭之前的问问题的方式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题5：如何创建并切换分支？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个问题比较简单。如果想要一条命令实现的话直接输入下面这条命令就可以创建并且切换到dev分支。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 创建并切换
git checkout -b dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果想多体验一下敲键盘的快感的话。也可以使用如下两条命令。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 创建
git branch dev
# 切换
git  checkout dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;补充几个：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch&lt;/code&gt; 查看当前分支。其那面有&lt;code&gt;*&lt;/code&gt;的代表当前分支。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch -d&lt;/code&gt;删除分支。注意删除分支是有一些条件的哦。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout 分支名称&lt;/code&gt;切换分支。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题6：如何合并分支并且解决冲突呢？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个问题最关键。其实SVN最让人诟病的有两点。一点是集中式处理方式而不是分布式，另一点就是无论是合并还是创建分支的速度都是巨慢。&lt;/p&gt;

&lt;p&gt;合并分支。比如把dev合并到master之上，你需要先把dev的分支的内容add并且commit，然后切换到master。在master之上使用&lt;code&gt;git merge dev&lt;/code&gt;，如果没有冲突就算合并好了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 创建并切换分支
git checkout -b dev
# 修改分支上的文件
......
# 切回主分支
git checkout master
# 合并分支
git merge dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解决冲突的唯一的办法就是信息的看冲突的地方。然后删除，修改……其他的没有捷径。下面看一个简单地冲突吧。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# 合并爆冲突
Auto-merging README.md
CONFLICT (content): Merge conflict in README.md
Automatic merge failed; fix conflicts and then commit the result.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&lt;code&gt;git diff&lt;/code&gt;比较文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;diff --cc README.md
index fdd5d55,9826dcc..0000000
--- a/README.md
+++ b/README.md
@@@ -1,2 -1,2 +1,6 @@@
++&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
 +134234hello world
++=======
+ 112212hello world
++&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; dev
  hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的结果很显然是你当前改的地方和dev冲突了一行。然后这行的内容是……&lt;/p&gt;

&lt;h2 id=&quot;id-section-2&quot;&gt;远程操作&lt;/h2&gt;

&lt;p&gt;远程操作就是在前面的操作结束之后把本地的代码push到远程服务器端。使用的命令是&lt;code&gt;git push&lt;/code&gt;。当然，前提是你先得连接到服务器。比如先从服务器&lt;code&gt;git clone&lt;/code&gt;一份代码下来。&lt;/p&gt;

&lt;p&gt;常用的命令有：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone 地址
# 推送到远程主干
git push origin master
等等
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;id-section-3&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;有了SVN的基础学习Git也就很容易了。只要明白分布式的特点就OK了。其他的命令看帮助，或者Google It。最后mac上推荐一个工具&lt;a href=&quot;https://www.sourcetreeapp.com/&quot;&gt;SourceTree&lt;/a&gt;，用了的都说好。&lt;/p&gt;

&lt;h2 id=&quot;id-section-4&quot;&gt;致谢&lt;/h2&gt;

&lt;p&gt;感谢下面这些站点的作者，这些站点给了我很多思路。&lt;/p&gt;

&lt;p&gt;网站1： &lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot;&gt;Git教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;网站2： &lt;a href=&quot;https://www.github.com&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 11 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://searchp.cc/20150811.html</link>
        <guid isPermaLink="true">http://searchp.cc/20150811.html</guid>
        
        
        <category>others</category>
        
      </item>
    
      <item>
        <title>iterm2之ssh配置</title>
        <description>&lt;p&gt;说明一下：这里需要用到Expect。Expect是一个免费的编程工具语言，用来实现自动和交互式任务进行通信，而无需人的干预。&lt;/p&gt;

&lt;h2 id=&quot;id-expect&quot;&gt;创建Expect文件&lt;/h2&gt;

&lt;p&gt;为每一台远程服务器创建一个Expect文件。我将下面这个文件命名为ssh111，并且将这个文件放到系统环境变量之中。为了简单，我直接将文件放到了&lt;code&gt;/usr/bin/&lt;/code&gt;下面。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;
#!/usr/bin/expect -f

# 设定变量
set ip 192.168.0.111
set username  searchpcc
set password 123456
# 连接
spawn ssh $username@$ip
set timeout 30
# 处理第一次登陆时候的确认操作
expect {
        &quot;(yes/no)?&quot;
        {send &quot;yes\n&quot;;exp_continue}
        &quot;password:&quot;
        {send &quot;$password\n&quot;}
}
interact

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;id-profileexpect&quot;&gt;使用profile功能加载Expect文件&lt;/h2&gt;

&lt;p&gt;利用 Command + o 快捷键打开Profiles功能，然后选择Edit Profiles…，接着新建自己的profiles。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/profiles.png&quot; alt=&quot;编辑profiles&quot; title=&quot;编辑profiles&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;id-section&quot;&gt;进行登录操作&lt;/h2&gt;

&lt;p&gt;按下Command + o， 然后，选择你已经添加的profile，回车就可以自动登陆了。多个远程服务器设置添加多个Expect文件和多个profile就可以。&lt;/p&gt;

&lt;h2 id=&quot;id-section-1&quot;&gt;写在最后&lt;/h2&gt;

&lt;p&gt;因为我目前所在的环境远程服务器众多，所以为了方便远程登陆服务器就网上找了一下并且结合自己的理解采用了这样一个方式进行ssh登陆记住用户信息的处理。事实上你根本不需要使用profiles，你直接在终端输入一下ssh111试试，是不是直接登陆上了服务器呢？profiles在这里只是能够记录更多的信息而已。由此可见，在Linux和Unix上只要支持Expect，是不是就可以了呢？&lt;/p&gt;

</description>
        <pubDate>Thu, 23 Jul 2015 00:00:00 +0800</pubDate>
        <link>http://searchp.cc/20150723.html</link>
        <guid isPermaLink="true">http://searchp.cc/20150723.html</guid>
        
        
        <category>mac</category>
        
      </item>
    
      <item>
        <title>PHP多版本共存</title>
        <description>&lt;p&gt;随着PHP7.0的到来，很多PHPer都会按捺不住自己内心的激动。想去试试PHP7.0，去感受一下直接跨过6来到7的PHP。这个时候你又不能抛弃之前的PHP5.x，所以你需要一个方案来实现多版本PHP共存，并且切换自如。这篇文章就介绍如何在Mac上实现多版本PHP共存。&lt;/p&gt;

&lt;h2 id=&quot;id-php&quot;&gt;安装多版本PHP&lt;/h2&gt;

&lt;p&gt;使用强大的brew安装54,55,56,70版本的PHP。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# 安装php54
brew install php54

# 安装php55
brew unlink php54
brew install php55

# 安装php56
brew unlink php55
brew install php56

# 安装php7.0
brew unlink php56
brew install php70

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到/usr/local/Cellar/下查看PHP的安装情况。发现PHP已经安装成功。&lt;/p&gt;

&lt;h2 id=&quot;id-php-version&quot;&gt;安装php-version&lt;/h2&gt;

&lt;p&gt;安装&lt;a href=&quot;/assets/images/php-version.png&quot;&gt;php-version&lt;/a&gt;进行PHP版本的管理。安装的方法如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;brew tap homebrew/dupes
brew tap josegonzalez/homebrew-php
brew install php-version

# 注意：untap josegonzalez/homebrew-php
rew untap josegonzalez/homebrew-php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编辑 ~/.zshrc 文件，在最后一行加入如下内容。然后soure ~/.zshrc&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;source $(brew --prefix php-version)/php-version.sh &amp;amp;&amp;amp; php-version 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;测试php-version&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;php-version
# 使用PHP7.0
php-version 7.0.0beta2
# 显示当前版本
php -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/php-version.png&quot; alt=&quot;php-version显示&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;id-apache&quot;&gt;配置Apache&lt;/h2&gt;

&lt;p&gt;虽然，在你的控制台php -v显示的是你用php-version 选定的PHP版本。但是，如果你不只是想让后台脚本采用你选择的PHP版本，还想让Web服务器也支持。这个时候你需要配置Web服务器的配置文件。Mac上默认服务器Apache修改配置文件 vim /etc/apache2/httpd.conf&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-apache&quot;&gt;# php 5.4
# LoadModule php5_module /usr/local/Cellar/php54/5.4.43_2/libexec/apache2/libphp5.so
# php 5.5
  LoadModule php5_module /usr/local/Cellar/php55/5.5.27_2/libexec/apache2/libphp5.so
# php 5.6
# LoadModule php5_module /usr/local/Cellar/php56/5.6.11_2/libexec/apache2/libphp5.so
# php7.0
# LoadModule php7_module /usr/local/Cellar/php70/7.0.0-beta.2/libexec/apache2/libphp7.so
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：在Web服务器配置文件配置之前，需要你先用php-version选中你要配置的php。配置完之后重启Apache即可。&lt;/p&gt;

&lt;h2 id=&quot;id-section&quot;&gt;参考链接&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wilmoore/php-version&quot;&gt;php-version-github&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 22 Jul 2015 00:00:00 +0800</pubDate>
        <link>http://searchp.cc/20150722.html</link>
        <guid isPermaLink="true">http://searchp.cc/20150722.html</guid>
        
        
        <category>php</category>
        
      </item>
    
      <item>
        <title>CodeIgniter集成Smarty</title>
        <description>&lt;p&gt;&lt;code&gt;CodeIgniter&lt;/code&gt;推荐使用原生的模板并且提供了一系列方法进行模板的操作。但是，一般的&lt;code&gt;PHP&lt;/code&gt;框架和&lt;code&gt;PHP&lt;/code&gt;系统都会推荐比较成熟的Smarty模板引擎。这篇文章主要介绍&lt;code&gt;CodeIgniter&lt;/code&gt;如何配置&lt;code&gt;Smarty&lt;/code&gt;。文章的最后将简单介绍如何完美的使用&lt;code&gt;CodeIgniter&lt;/code&gt;原生的模板解决方案进行模板的输出。&lt;/p&gt;

&lt;h2 id=&quot;id-smarty&quot;&gt;下载Smarty&lt;/h2&gt;

&lt;p&gt;请点击&lt;a href=&quot;https://github.com/smarty-php/smarty/archive/v3.1.24.tar.gz&quot;&gt;这里&lt;/a&gt;进行下载。下载之后将smarty-x.x.x.x改名为smarty。&lt;/p&gt;

&lt;h2 id=&quot;id-smarty-1&quot;&gt;安装和配置Smarty&lt;/h2&gt;

&lt;h3 id=&quot;id-smarty-2&quot;&gt;放置Smarty&lt;/h3&gt;

&lt;p&gt;将整个&lt;code&gt;Smarty&lt;/code&gt;文件夹放置到&lt;code&gt;third_party&lt;/code&gt;（第三方类库）下面。&lt;/p&gt;

&lt;h3 id=&quot;id-smartyconfphp&quot;&gt;创建smarty.conf.php配置文件&lt;/h3&gt;

&lt;p&gt;在config下面创建文件smarty.conf.php文件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    $config[&#39;template_dir&#39;] = APPLICATION_ROOT.&#39;/application/views/templates/&#39;;
    $config[&#39;compile_dir&#39;] =  APPLICATION_ROOT.&#39;/application/cache/smarty/templates_c/&#39;;
    $config[&#39;left_delimiter&#39;]  = &#39;&amp;lt;{&#39;;
    $config[&#39;right_delimiter&#39;]  = &#39;}&amp;gt;&#39;;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;id-cismartyphp&quot;&gt;创建CI_Smarty.php类库文件&lt;/h3&gt;

&lt;p&gt;在&lt;code&gt;libraries&lt;/code&gt;&lt;code&gt;里面创建&lt;/code&gt;&lt;code&gt;CI_Smarty.php&lt;/code&gt;`文件，然后写入如下内容:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php  if (!defined(&#39;BASEPATH&#39;)) exit(&#39;No direct script access allowed&#39;);
/**
 * @author  searchpcc
 * 为了节省文章篇幅，代码也比较简单我就不加注释了。
 */
require_once( APPPATH.&#39;third_party/smarty/libs/Smarty.class.php&#39; );

class CI_Smarty extends Smarty {
    
    function __construct() {
        parent::__construct();
        $CI = get_instance();
        $CI-&amp;gt;load-&amp;gt;config(&#39;smarty.config&#39;);
        $this-&amp;gt;error_reporting   = $CI-&amp;gt;config-&amp;gt;item(&#39;smarty.template_error_reporting&#39;);
        $this-&amp;gt;template_dir = $CI-&amp;gt;config-&amp;gt;item(&quot;template_dir&quot;);
        $this-&amp;gt;compile_dir = $CI-&amp;gt;config-&amp;gt;item(&quot;compile_dir&quot;);
        $this-&amp;gt;left_delimiter = $CI-&amp;gt;config-&amp;gt;item(&quot;left_delimiter&quot;);
        $this-&amp;gt;right_delimiter = $CI-&amp;gt;config-&amp;gt;item(&quot;right_delimiter&quot;);
        $this-&amp;gt;assign(&quot;this&quot;, $CI);
    }
    
    function view($template, $data = array(), $return = FALSE) {
        foreach ($data as $key =&amp;gt; $val) {
            $this-&amp;gt;assign($key, $val);
        }
        if ($return == FALSE) {
            $CI =&amp;amp; get_instance();
            if (method_exists( $CI-&amp;gt;output, &#39;set_output&#39; )) {
                $CI-&amp;gt;output-&amp;gt;set_output( $this-&amp;gt;fetch($template) );
            } else {
                $CI-&amp;gt;output-&amp;gt;final_output = $this-&amp;gt;fetch($template);
            }
            return;
        } else {
            return $this-&amp;gt;fetch($template);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;id-autoloadphp&quot;&gt;修改autoload.php自动加载文件&lt;/h3&gt;

&lt;p&gt;将&lt;code&gt;ci_smarty&lt;/code&gt;加入到自动加载文件之中。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$autoload[&#39;libraries&#39;] = array(&#39;ci_smarty&#39;,...);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;id-smarty-3&quot;&gt;测试Smarty类库&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// 模板是/views/templates/test/test.tpl
$this-&amp;gt;ci_smarty-&amp;gt;display(&#39;test/test.tpl&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;id-codeigniter&quot;&gt;CodeIgniter自带模板处理&lt;/h2&gt;

&lt;h3 id=&quot;id-echo&quot;&gt;echo输出&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?=$name?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;id-foreach&quot;&gt;foreach&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php foreach ($todo as $item): ?&amp;gt;
&amp;lt;?php endforeach; ?&amp;gt;

// for while等类似
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;id-if-elseif--else&quot;&gt;if elseif 和 else&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php if ($username == &#39;sally&#39;): ?&amp;gt;
   &amp;lt;h3&amp;gt;Hi Sally&amp;lt;/h3&amp;gt;
&amp;lt;?php elseif ($username == &#39;joe&#39;): ?&amp;gt;
   &amp;lt;h3&amp;gt;Hi Joe&amp;lt;/h3&amp;gt;
&amp;lt;?php else: ?&amp;gt;
   &amp;lt;h3&amp;gt;Hi unknown user&amp;lt;/h3&amp;gt;
&amp;lt;?php endif; ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;id-section&quot;&gt;参考链接&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://codeigniter.org.cn/user_guide/general/alternative_php.html&quot;&gt;视图文件的 PHP 替代语法&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.coolphptools.com/codeigniter-smarty&quot;&gt;CodeIgniter+Smarty - Perfect Together&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 09 Jun 2015 00:00:00 +0800</pubDate>
        <link>http://searchp.cc/20150609.html</link>
        <guid isPermaLink="true">http://searchp.cc/20150609.html</guid>
        
        
        <category>php</category>
        
      </item>
    
      <item>
        <title>Hello World</title>
        <description>&lt;p&gt;折腾。还记得之前折腾过&lt;code&gt;CSDN&lt;/code&gt;，折腾过&lt;code&gt;cnblogs&lt;/code&gt;，折腾过&lt;code&gt;点点&lt;/code&gt;，折腾过&lt;code&gt;wordpress&lt;/code&gt;，折腾过&lt;code&gt;blogspot&lt;/code&gt;等等。现在到了折腾&lt;code&gt;jekyll&lt;/code&gt;。&lt;code&gt;jekyll&lt;/code&gt;我总共换过四次模板，从最原始的直接搬过来别人的模板，到用原生的模板，再到自己写简陋的模板，再到现在自己写的认为很满意的模板。自己感觉到了自己在审美和专业能力方面的提升。&lt;/p&gt;

&lt;h2 id=&quot;id-section&quot;&gt;博客声明&lt;/h2&gt;

&lt;p&gt;本博客，是一个master，不出意外在未来的很长一段时间我都不会改变它的样子，只会不断的增加它的内容（文章）。因为在我看来，它已经完全符合我最理想的博客的样子。肯定读者尊重文章版权，如有引用或者转载务必注明出处。我认为一个合格的人应该注重这些。&lt;/p&gt;

&lt;p&gt;现在是2015年7月22日20：46，从今天起每周我都会至少发表一篇自己认为有价值的文章。当然，除了技术文章自己也会把自己的一些感想记录于此。&lt;/p&gt;

&lt;h2 id=&quot;id-section-1&quot;&gt;页面简介&lt;/h2&gt;

&lt;p&gt;archive 页面是按照文章的归档的时间进行文章的列举的一个页面。系统自动更新。&lt;/p&gt;

&lt;p&gt;category 页面是按照文章的分类进行文章的列举的一个页面。系统自动更新。&lt;/p&gt;

&lt;p&gt;read 页面是我自己将自己读过的书籍，或者正在读的书籍列举的一个页面。作者手动更新。&lt;/p&gt;

&lt;p&gt;resume 页面是我自己将自己掌握的技能，已经掌握的程度列举的一个页面，希望能够很好地向第三方展现自己。作者手动更新。&lt;/p&gt;

&lt;p&gt;about 页面是我自己将自己的基本的可以向外界透露的联系方式列举的一个页面。作者手动更新。&lt;/p&gt;

&lt;p&gt;RSS 页面是用来供读者进行文章订阅的。&lt;/p&gt;

&lt;h2 id=&quot;id-section-2&quot;&gt;博客特色&lt;/h2&gt;

&lt;p&gt;本博客线上版所有的样式文件，脚本文件，图片文件等都存放于七牛云存储。（这样可以最大限度的加快访问速度）。本博客是借助于jekyll搭建的纯静态博客，但是很好地实现了本地开发和发布上线的流程。也就是可以完美的实现无网环境开发（加载本地资源），有网环境上线（加载七牛云存储资源）。本博客借助于&lt;a href=&quot;http://getbootstrap.com/&quot;&gt;bootstrap&lt;/a&gt;完全实现了快平台的使用。利用&lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;jekyll&lt;/a&gt;加上自己的目录规划使得整个项目越发的perfect。借助于highlight加上自己的样式的处理完美的支持各种代码的高亮……&lt;/p&gt;

&lt;h2 id=&quot;id-section-3&quot;&gt;致谢&lt;/h2&gt;

&lt;p&gt;非常感谢&lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;jekyll&lt;/a&gt;开源静态博客，感谢&lt;a href=&quot;https://github.com&quot;&gt;github&lt;/a&gt;免费代码托管平台，感谢&lt;a href=&quot;http://www.qiniu.com/&quot;&gt;七牛&lt;/a&gt;数据存储，感谢&lt;a href=&quot;http://getbootstrap.com/&quot;&gt;bootstrap&lt;/a&gt;和所有的无私奉献的人们，正因为有你们这个世界才如此的丰富多彩。我也会和你们类似的方式来回报这个多彩的世界。&lt;/p&gt;

</description>
        <pubDate>Sat, 30 May 2015 00:00:00 +0800</pubDate>
        <link>http://searchp.cc/20150530.html</link>
        <guid isPermaLink="true">http://searchp.cc/20150530.html</guid>
        
        
        <category>others</category>
        
      </item>
    
  </channel>
</rss>
